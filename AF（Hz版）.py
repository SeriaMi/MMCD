import numpy as np
import matplotlib.pyplot as plt
import math
from scipy.signal import correlate
import time
from scipy.signal import fftconvolve

# 字体为微软雅黑
plt.rcParams['font.sans-serif'] = ['Microsoft YaHei']
plt.rcParams['axes.unicode_minus'] = False
#mainlobe=0
def plot_3D_AF(AF, delay_interval, doppler_interval, title):
    """绘制模糊函数的图"""
    fig = plt.figure(figsize=(16, 9), dpi=300)
    ax = plt.axes(projection='3d')
    X, Y = np.meshgrid(delay_interval, doppler_interval)
    Z = AF
    ax.plot_surface(X, Y, Z, cmap='rainbow')

    # 显示 Z = 0 平面，设置为更透明
    Z_zero = np.zeros_like(X)
    ax.plot_surface(X, Y, Z_zero, alpha=0, color='gray')

    # 显示 Z = 50 平面，设置为透明
    Z_fifty = np.full_like(X, -50)
    ax.plot_surface(X, Y, Z_fifty, alpha=0, color='gray')

    ax.set_title(title)
    ax.set_xlabel('Delay')
    ax.set_ylabel('Doppler shift (Hz)')
    ax.set_zlabel('AF（dB）')
    plt.show()
def precompute_phase_matrix(doppler_interval, K, L, Tpri, Tc):
    #预计算相位偏移矩阵
    time_components = (np.arange(K) % K) * Tpri  # (K,)
    time_shifts = np.arange(L) * Tc               # (L,)
    total_time = time_shifts[:, None] + time_components[None, :]  # (L, K)
    phase_matrix = np.exp(1j * 2 * np.pi * doppler_interval[:, None, None] * total_time[None, :, :])  # (D, L, K)
    return phase_matrix

def ap_auto_ambu_cal(M, K, L, delay_interval, doppler_interval, Tpri, Tc, seqs,mainlobe):
    """优化非周期自模糊计算"""
    D = len(doppler_interval)
    N = 2 * L - 1
    auto_ambu = np.zeros((D, N), dtype=complex)
    phase_matrix = precompute_phase_matrix(doppler_interval, K, L, Tpri, Tc)


    corrMax = 0
    for m in range(M):
        seq_group = seqs[:, m*K:(m+1)*K]  # (L, K)
        rev_seq = np.conj(seq_group[::-1, :])  # (L, K)翻转并共轭

        # 补零并计算FFT
        rev_padded = np.zeros((N, K), dtype=complex)
        rev_padded[:L] = rev_seq
        rev_fft = np.fft.fft(rev_padded, axis=0)  # (N, K)

        # 生成相位调整后的信号并补零
        temp_seq = seq_group[None, :, :] * phase_matrix  # (D, L, K)
        temp_padded = np.zeros((D, N, K), dtype=complex)
        temp_padded[:, :L] = temp_seq
        temp_fft = np.fft.fft(temp_padded, axis=1)  # (D, N, K)

        # 频域相乘并逆变换
        conv_result = np.fft.ifft(temp_fft * rev_fft[None, :, :], axis=1)  # (D, N, K)
        auto_ambu = np.sum(conv_result, axis=2)  # 沿K求和
        auto_ambu = np.abs(auto_ambu)
        ap_auto_ambu_without_zero_delay = np.delete(auto_ambu, L-1, axis=1)
        corrMax = max(np.max(ap_auto_ambu_without_zero_delay),corrMax)

        #mainlobe = np.max(auto_ambu)
        auto_ambu_db = 20 * np.log10(auto_ambu / mainlobe)
        auto_ambu_db = np.clip(auto_ambu_db, -50, 0)
        plot_3D_AF(auto_ambu_db, delay_interval, doppler_interval, "优化非周期自模糊结果")

    return corrMax
def ap_cross_ambu_cal(M, K, L, delay_interval, doppler_interval, Tpri, Tc, seqs,mainlobe):
    """优化非周期互模糊计算"""
    D = len(doppler_interval)
    N = 2 * L - 1
    cross_ambu = np.zeros((D, N), dtype=complex)
    phase_matrix = precompute_phase_matrix(doppler_interval, K, L, Tpri, Tc)
    corrMax = 0
    for m1 in range(M):
        group1 = seqs[:, m1*K:(m1+1)*K]
        for m2 in range(m1+1, M):
            group2 = seqs[:, m2*K:(m2+1)*K]
            #rev_group2 = group2[::-1, :]
            rev_group2 = np.conj(group2[::-1, :])  # (L, K)翻转并共轭
            rev_padded = np.zeros((N, K), dtype=complex)
            rev_padded[:L] = rev_group2
            rev_fft = np.fft.fft(rev_padded, axis=0)

            temp_seq = group1[None, :, :] * phase_matrix
            temp_padded = np.zeros((D, N, K), dtype=complex)
            temp_padded[:, :L] = temp_seq
            temp_fft = np.fft.fft(temp_padded, axis=1)

            conv_result = np.fft.ifft(temp_fft * rev_fft[None, :, :], axis=1)
            cross_ambu = np.sum(conv_result, axis=2)
            cross_ambu = np.abs(cross_ambu)
            corrMax = max(np.max(cross_ambu),corrMax)

            cross_ambu = np.abs(cross_ambu)
            cross_ambu_db = 20 * np.log10(cross_ambu / mainlobe)
            cross_ambu_db = np.clip(cross_ambu_db, -50, 0)
            plot_3D_AF(cross_ambu_db, delay_interval, doppler_interval, "优化非周期互相关结果（FFT）")
    return corrMax


#周期的暂时没改完
def p_auto_ambu_cal(M, K, L, delay_interval, doppler_interval, Tpri, Tc, seqs):
    """优化周期自模糊计算"""
    start_time = time.time()

    auto_ambu = np.zeros((len(doppler_interval), L), dtype=complex)
    time_shifts = np.arange(L) * Tc

    for m in range(M):
        group_indices = range(m * K, (m + 1) * K)
        seq_group = seqs[:, group_indices]

        for j, theta_test in enumerate(doppler_interval):
            phase_shift = np.exp(1j * 2 * np.pi * theta_test * ((np.arange(K) % K) * Tpri + time_shifts[:, None]))
            seq_temp = seq_group * phase_shift
            periodic_seq_temp = np.tile(seq_temp, (2, 1))  # 扩展信号以进行周期相关
            auto_ambu[j, :] += np.sum(fftconvolve(periodic_seq_temp, seq_group[::-1, :], mode='full', axes=0)[L-1:L*2-1, :], axis=1)

    auto_ambu = np.abs(auto_ambu)
    print("优化周期自模糊计算时间：", time.time() - start_time)

    global mainlobe
    mainlobe = np.max(auto_ambu)
    auto_ambu_db = 20 * np.log10(auto_ambu / mainlobe)
    auto_ambu_db = np.clip(auto_ambu_db, -50, 0)
    plot_3D_AF(auto_ambu_db, delay_interval, doppler_interval, "优化周期自相关结果")

    return auto_ambu

def p_cross_ambu_cal(M, K, L, delay_interval, doppler_interval, Tpri, Tc, seqs):
    """优化周期互模糊计算"""
    start_time = time.time()

    cross_ambu = np.zeros((len(doppler_interval), L), dtype=complex)
    time_shifts = np.arange(L) * Tc

    for m1 in range(M):
        group1_indices = range(m1 * K, (m1 + 1) * K)
        seq_group1 = seqs[:, group1_indices]

        for m2 in range(m1 + 1, M):
            group2_indices = range(m2 * K, (m2 + 1) * K)
            seq_group2 = seqs[:, group2_indices]

            for j, theta_test in enumerate(doppler_interval):
                phase_shift = np.exp(1j * 2 * np.pi * theta_test * ((np.arange(K) % K) * Tpri + time_shifts[:, None]))
                seq_temp = seq_group1 * phase_shift
                periodic_seq_temp = np.tile(seq_temp, (2, 1))
                cross_ambu[j, :] += np.sum(fftconvolve(periodic_seq_temp, seq_group2[::-1, :], mode='full', axes=0)[L-1:L*2-1, :], axis=1)

    cross_ambu = np.abs(cross_ambu)
    print("优化周期互模糊计算时间：", time.time() - start_time)

    global mainlobe
    cross_ambu_db = 20 * np.log10(cross_ambu / mainlobe)
    cross_ambu_db = np.clip(cross_ambu_db, -50, 0)
    plot_3D_AF(cross_ambu_db, delay_interval, doppler_interval, "优化周期互相关结果（FFT）")

    return cross_ambu

if __name__ == '__main__':
    """
    #newAF 2 2 8 250km/h
    seq_found = np.array([-1,1,-1,-1,1,-1,-1,-1,
                        -1,-1,-1,1,1,1,-1,1,
                          1 ,-1,1,1,1,-1,-1,-1,
                        1,1,1,-1,1,1,-1,1
                          ])
    seqs = seq_found.reshape((4, 8)).T
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """
    """
    #seq_sum m=2 k=4 l=4，列向量是一条序列，前4列是用户0，后四列是用户1
    seq_found = np.array([-1., -1.,  1.,  1.,  1.,  1., -1., -1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1., -1., -1.,
                          1.,  1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1., -1., -1., -1.,
                          1.,  1.,  1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,
                          1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.])
    seqs = seq_found.reshape((8, 8))
    """

    """
    #两个都优化（120s）
    seq_found = np.array([1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0,
                          1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0,
                          -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0,
                          1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0,
                          1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0,
                          -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                          -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0])
    seqs = seq_found.reshape((8, 16))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """

    """
    #newAF 2 8 8 250km/h
    #bpsk
    seq_found = np.array([1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1,
                           ])
    #CCC
    nested_list = [
        [[1, -1, -1, 1, 1, -1, -1, -1], [1, 1, -1, -1, 1, 1, -1, 1], [1, -1, 1, -1, 1, -1, 1, 1], [1, 1, 1, 1, 1, 1, 1, -1],
         [1, -1, -1, 1, -1, 1, 1, 1], [1, 1, -1, -1, -1, -1, 1, -1], [1, -1, 1, -1, -1, 1, -1, -1], [1, 1, 1, 1, -1, -1, -1, 1]],
        [[1, 1, -1, -1, 1, 1, -1, 1], [1, -1, -1, 1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, -1], [1, -1, 1, -1, 1, -1, 1, 1],
         [1, 1, -1, -1, -1, -1, 1, -1], [1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, -1, -1, -1, 1], [1, -1, 1, -1, -1, 1, -1, -1]]
    ]

    # 将二维嵌套列表转换为一维 numpy 数组
    seq_found = np.array([element for sublist1 in nested_list for sublist2 in sublist1 for element in sublist2])
    #qpsk
    #seq_found = np.array([-1, 1j, 1j, -1, 1, 1j, 1, -1, 1, 1j, 1, 1, 1j, -1j, -1, 1, 1, -1, 1j, 1, 1j, 1j, -1, 1, 1, -1, -1j, -1, -1, 1j, -1j, 1, 1j, -1j, 1j, -1j, -1j, -1, 1j, -1j, 1j, 1, -1, -1, -1, 1j, -1, -1j, 1, 1j, -1j, 1j, 1, -1, -1, 1j, -1j, 1, 1j, 1j, -1, 1j, 1, -1j, -1, 1, 1, 1, -1, -1, 1j, 1j, 1, 1j, 1j, 1j, -1j, -1, -1j, 1, 1j, 1, 1, -1j, -1, 1j, 1j, 1j, 1, 1j, 1, 1j, -1j, 1j, 1j, 1j, 1j, 1j, 1j, 1j, -1, -1j, 1, 1j, 1, 1j, 1j, 1j, -1, 1j, -1j, -1j, -1, 1j, 1j, 1j, 1, 1, 1j, 1, -1, -1j, -1j, 1, 1, -1j, -1, 1j,
    #                      ])
    #sum
    #seq_found = np.array
    seqs = seq_found.reshape((8, 16))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """
    """
    #newAF 2 8 8 250km/h CCC

    #CCC
    nested_list = [
        [[1, -1, -1, 1, 1, -1, -1, -1], [1, 1, -1, -1, 1, 1, -1, 1], [1, -1, 1, -1, 1, -1, 1, 1], [1, 1, 1, 1, 1, 1, 1, -1],
         [1, -1, -1, 1, -1, 1, 1, 1], [1, 1, -1, -1, -1, -1, 1, -1], [1, -1, 1, -1, -1, 1, -1, -1], [1, 1, 1, 1, -1, -1, -1, 1]],
        [[1, 1, -1, -1, 1, 1, -1, 1], [1, -1, -1, 1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, -1], [1, -1, 1, -1, 1, -1, 1, 1],
         [1, 1, -1, -1, -1, -1, 1, -1], [1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, -1, -1, -1, 1], [1, -1, 1, -1, -1, 1, -1, -1]]
    ]

    # 将二维嵌套列表转换为一维 numpy 数组
    seq_found = np.array([element for sublist1 in nested_list for sublist2 in sublist1 for element in sublist2])
    seqs = seq_found.reshape((16, 8)).T
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """
    """
    #newAF 2 8 8 250km/h random
    seq_found = np.array([1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1]

                         )
    seqs = seq_found.reshape((8, 16))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """
    """
    #newAF 2 8 8 12km/h
    seq_found = np.array
                          ])
    seqs = seq_found.reshape((8, 16))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 533.33
    """

    """
    #newAF 2 8 8 150km/h
    seq_found = np.array([-1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1,
                          ])
    seqs = seq_found.reshape((8, 16))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 6666.67
    """


    #newAF 2 16 16
    #BPSK
    seq_found = np.array([-1,-1,1,1,-1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,-1,1,-1,1,-1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,-1,1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,1,-1,1,1,1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,-1,-1,-1,1,-1,1,1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,1,-1,1,1,1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,-1,1,1,1,-1,1,-1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,1,1,-1,1,1,-1,1,-1,1,1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,-1,1,-1,-1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,-1,1,1,1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,1,-1
                          ])
    

    #QPSK
    #seq_found = np.array([1,1,-1,1j ,-1j ,1,1,1,1j ,1j ,1,-1,1j ,-1,1j ,1,1,1,-1j ,-1j ,-1j ,-1j ,-1j ,-1j ,1,-1,1,1,-1,1j ,1,1,1,1,-1,-1,1j ,1j ,1,1j ,-1j ,1,1j ,-1,-1j ,-1,-1,1j ,-1j ,1j ,1j ,-1j ,-1,1,1j ,-1j ,1,-1j ,-1,1j ,1,-1j ,-1,1,-1,-1,1,1j ,-1j ,1,1j ,1,1j ,1,-1j ,-1,-1j ,-1,-1j ,-1j ,1j ,-1j ,1j ,1j ,-1j ,-1j ,1,-1,-1,1,1,1,1j ,-1,-1,-1j ,-1,1,1j ,1,1j ,1,-1j ,-1,1,1j ,1,1,-1,1j ,-1j ,1j ,1,1,1j ,-1j ,-1,-1j ,1j ,-1j ,-1,-1j ,-1,1,1j ,-1j ,-1j ,-1j ,-1j ,1,-1j ,-1,1j ,1,-1,-1,1j ,1j ,1j ,1,1,1j ,1j ,-1,1j ,-1j ,-1j ,-1,-1,-1,1j ,1,-1j ,1j ,1j ,1j ,1j ,-1j ,1,1j ,-1,-1j ,1j ,-1j ,1,1j ,1,-1j ,-1,1j ,-1j ,1,1j ,-1j ,1j ,1j ,1,-1,1j ,1j ,1,-1j ,1j ,-1j ,-1j ,1,1,1j ,1,-1j ,1,-1j ,1j ,1,1j ,1j ,1j ,-1,-1,-1j ,-1,1j ,-1,1j ,-1,1,-1j ,1,1j ,-1j ,1,1j ,-1,-1j ,-1,-1j ,1j ,-1,1j ,1j ,-1j ,1j ,1j ,1j ,-1j ,-1,1,1j ,1,-1j ,1,-1j ,-1,1,-1j ,1j ,-1,-1j ,1j ,-1,1j ,1j ,-1,1j ,1j ,1,1,1j ,-1j ,1j ,1j ,-1,-1j ,-1j ,1,1j ,1,-1j ,1j ,1j ,1,1,1j ,1j ,1,-1j ,-1,-1,-1j ,-1j ,1j ,1j ,-1,1j ,1j ,1j ,1j ,-1,1j ,1j ,-1j ,-1j ,1,1,1j ,-1j ,1j ,1,1,1,1,-1j ,-1j ,-1j ,1j ,-1,1j ,1j ,1,1j ,1j ,1,1j ,-1j ,-1,1j ,1,1j ,1,-1j ,1j ,1j ,1j ,1j ,-1j ,-1j ,1j ,1,1j ,1j ,1j ,-1j ,1,1,-1j ,1,1j ,-1,1,1j ,1j ,1j ,1j ,1j ,-1j ,-1j ,1,1j ,-1j ,1,1j ,1,1j ,1j ,1j ,1,1j ,1,-1,1j ,1j ,1j ,1j ,1j ,1j ,1j ,-1,1j ,1,1,1j ,1j ,-1,1j ,-1j ,-1,1j ,-1j ,1,1,1,1j ,1j ,-1,-1,-1,1j ,1,1,-1,-1,-1,1j ,1j ,-1,1,-1,-1,-1,1,1,1j ,1,-1,-1,1,1,1,1,-1j ,-1,1j ,1j ,1,1,-1,1,1j ,1,-1j ,-1,1,-1j ,1,-1,1j ,1,1j ,-1,1,-1,-1j ,1,1j ,1j ,1j ,-1,1,-1,1,-1,-1,-1j ,-1,1j ,1j ,-1j ,-1,-1,1j ,-1,-1,1j ,1j ,1j ,1j ,1j ,1j ,-1,1,1j ,1j ,-1,-1j ,-1,-1j ,-1,1,1,1j ,-1j ,1j ,-1,-1,1,-1,1,-1,-1j ,-1,1j ,1j ,1j ,-1,1j ,1j ,-1,1,1j ,1,-1,-1,1,1j ,-1j ,-1,1j ,1,-1j ,-1j ,1j ,1j ,1j ,-1j ,1j ,1,1j ,1j ,1j ,1j ,1j ,1,1j ,1j ,1j ,1j ,1j ,1j ,-1,1,1,1j
    #                      ])
    #8PSK
    #seq_found = np.array([ -1j, (-0.707-0.707j), (-1+0j), (0.707-0.707j), 1j, (-0.707-0.707j), (-1+0j), 1j, (0.707-0.707j), 1j, (0.707-0.707j), (-0.707+0.707j), (-0.707+0.707j), (1+0j), -1j, (0.707-0.707j), -1j, (-0.707-0.707j), (-1+0j), -1j, (-0.707-0.707j), 1j, (-0.707+0.707j), (1+0j), (0.707+0.707j), (-0.707-0.707j), (-1+0j), (0.707-0.707j), (0.707-0.707j), -1j, -1j, (1+0j), (1+0j), (-1+0j), -1j, (-1+0j), (-0.707-0.707j), (-0.707+0.707j), (-0.707-0.707j), 1j, 1j, (1+0j), (1+0j), (-0.707+0.707j), (-0.707+0.707j), 1j, (0.707+0.707j), (1+0j), -1j, (0.707-0.707j), (-0.707+0.707j), 1j, -1j, (0.707-0.707j), (1+0j), (-0.707+0.707j), (-1+0j), -1j, (1+0j), (-0.707+0.707j), (0.707-0.707j), (-0.707+0.707j), 1j, (-0.707+0.707j), (1+0j), (0.707-0.707j), (0.707+0.707j), (-0.707+0.707j), (-1+0j), (0.707-0.707j), (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, (0.707-0.707j), (-0.707+0.707j), (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), (-0.707-0.707j), (-0.707-0.707j), (0.707+0.707j), (0.707+0.707j), (1+0j), -1j, -1j, (-0.707+0.707j), (-0.707+0.707j), (1+0j), (0.707+0.707j), (0.707-0.707j), 1j, (1+0j), 1j, -1j, -1j, 1j, (0.707-0.707j), (-0.707-0.707j), (-0.707+0.707j), (0.707+0.707j), (-0.707-0.707j), 1j, 1j, (1+0j), (-1+0j), (-0.707+0.707j), (-1+0j), (-0.707-0.707j), 1j, (-0.707+0.707j), -1j, (0.707+0.707j), -1j, (0.707+0.707j), 1j, -1j, (-0.707+0.707j), (0.707-0.707j), (1+0j), (0.707-0.707j), 1j, (-0.707+0.707j), (1+0j), -1j, (-0.707+0.707j), (-0.707+0.707j), (0.707+0.707j), (-1+0j), -1j, -1j, 1j, (-0.707+0.707j), -1j, (0.707-0.707j), (-0.707+0.707j), (-1+0j), 1j, 1j, 1j, (-0.707-0.707j), (-1+0j), (0.707+0.707j), (0.707+0.707j), (0.707-0.707j), (-0.707-0.707j), (-0.707-0.707j), -1j, (1+0j), (-0.707+0.707j), (0.707+0.707j), (1+0j), (0.707+0.707j), (-0.707+0.707j), (-0.707-0.707j), (1+0j), (0.707-0.707j), (0.707+0.707j), (0.707-0.707j), (1+0j), (0.707-0.707j), -1j, (1+0j), (0.707-0.707j), (0.707-0.707j), (0.707+0.707j), (1+0j), 1j, -1j, (0.707-0.707j), (0.707+0.707j), (0.707-0.707j), -1j, -1j, 1j, -1j, -1j, (0.707+0.707j), (0.707+0.707j), (-1+0j), (1+0j), (-0.707-0.707j), (0.707+0.707j), (1+0j), (1+0j), 1j, -1j, (1+0j), -1j, (1+0j), 1j, (-1+0j), -1j, (1+0j), (0.707+0.707j), (0.707-0.707j), (-0.707-0.707j), (0.707+0.707j), 1j, -1j, (-0.707-0.707j), (-1+0j), (-0.707+0.707j), (0.707+0.707j), (-0.707-0.707j), (1+0j), 1j, (-0.707+0.707j), (0.707-0.707j), (-1+0j), (-0.707-0.707j), (-0.707-0.707j), (-0.707-0.707j), 1j, (0.707+0.707j), (0.707+0.707j), (-0.707-0.707j), (0.707+0.707j), (-0.707+0.707j), 1j, (1+0j), (-0.707-0.707j), (-1+0j), (0.707-0.707j), (-0.707+0.707j), (-1+0j), 1j, (0.707-0.707j), (1+0j), (-0.707-0.707j), -1j, (1+0j), (-1+0j), 1j, (-0.707-0.707j), 1j, (1+0j), (-1+0j), 1j, (1+0j), (-0.707-0.707j), -1j, 1j, (-1+0j), -1j, 1j, (1+0j), 1j, 1j, (-0.707+0.707j), (-0.707+0.707j), (0.707+0.707j), (-0.707+0.707j), -1j, (0.707+0.707j), (-1+0j), -1j, (0.707-0.707j), (-0.707+0.707j), (-0.707+0.707j), (1+0j), (0.707-0.707j), 1j, (-0.707-0.707j), (-0.707+0.707j), (-1+0j), (0.707-0.707j), (0.707+0.707j), (-0.707-0.707j), (0.707+0.707j), (1+0j), (0.707-0.707j), (0.707+0.707j), (1+0j), -1j, (-0.707-0.707j), (-0.707-0.707j), (-0.707-0.707j), (1+0j), (-0.707-0.707j), 1j, (0.707+0.707j), 1j, (-0.707+0.707j), (-0.707-0.707j), (0.707+0.707j), -1j, (-1+0j), (1+0j), (-0.707-0.707j), (0.707+0.707j), -1j, (-0.707-0.707j), (-1+0j), (-0.707+0.707j), (0.707+0.707j), (0.707+0.707j), (0.707-0.707j), (-0.707+0.707j), 1j, 1j, (-0.707-0.707j), 1j, (0.707+0.707j), -1j, (1+0j), (-0.707-0.707j), (-0.707+0.707j), (-0.707+0.707j), (1+0j), (-0.707+0.707j), -1j, (1+0j), (-0.707-0.707j), 1j, (-1+0j), (0.707-0.707j), (0.707+0.707j), (1+0j), (-1+0j), -1j, (0.707+0.707j), (0.707-0.707j), (0.707+0.707j), (0.707+0.707j), (0.707-0.707j), (-0.707+0.707j), (-0.707-0.707j), (0.707-0.707j), (-0.707+0.707j), (0.707-0.707j), (1+0j), -1j, 1j, (-0.707+0.707j), (1+0j), (0.707-0.707j), -1j, 1j, (1+0j), (0.707+0.707j), (0.707+0.707j), 1j, (0.707-0.707j), (-0.707-0.707j), (0.707-0.707j), (1+0j), -1j, 1j, (-0.707+0.707j), (1+0j), (0.707-0.707j), (0.707-0.707j), (0.707-0.707j), (0.707+0.707j), (-0.707+0.707j), (0.707-0.707j), (1+0j), 1j, (1+0j), -1j, (0.707+0.707j), (0.707-0.707j), (1+0j), (1+0j), (-0.707-0.707j), (1+0j), -1j, (1+0j), (0.707-0.707j), (0.707-0.707j), (0.707+0.707j), (-1+0j), (-0.707-0.707j), -1j, (-1+0j), (1+0j), (1+0j), (0.707-0.707j), (0.707-0.707j), (-0.707+0.707j), 1j, (-0.707+0.707j), (1+0j), (-0.707-0.707j), (-0.707+0.707j), (0.707-0.707j), (0.707-0.707j), (-0.707+0.707j), (-0.707-0.707j), (-0.707+0.707j), (-0.707+0.707j), (0.707-0.707j), 1j, (-0.707-0.707j), 1j, (0.707-0.707j), (0.707-0.707j), (0.707-0.707j), (-0.707-0.707j), (1+0j), (1+0j), (0.707-0.707j), 1j, (-0.707-0.707j), (1+0j), (-0.707-0.707j), (-0.707-0.707j), 1j, (-0.707-0.707j), (-1+0j), (1+0j), -1j, (-1+0j), (0.707+0.707j), (0.707-0.707j), (0.707+0.707j), -1j, (0.707-0.707j), -1j, -1j, (0.707+0.707j), -1j, (-0.707+0.707j), (1+0j), 1j, (0.707+0.707j), 1j, -1j, (-1+0j), (-0.707+0.707j), -1j, (-0.707-0.707j), (-1+0j), (0.707-0.707j), (0.707-0.707j), (1+0j), (0.707-0.707j), (-0.707-0.707j), (0.707-0.707j), (0.707-0.707j), (0.707-0.707j), (-1+0j), (-0.707-0.707j), (0.707+0.707j), 1j, (1+0j), (-0.707-0.707j), 1j, (-1+0j), (-0.707+0.707j), (-0.707-0.707j), (-1+0j), (0.707-0.707j), 1j, 1j, 1j, -1j, (-0.707+0.707j), -1j, (-0.707+0.707j), (0.707-0.707j), (0.707+0.707j), (-0.707+0.707j), (-1+0j), (0.707+0.707j), (0.707-0.707j), (-0.707+0.707j), (-0.707-0.707j), 1j, (0.707-0.707j), -1j, (-1+0j), (0.707+0.707j), -1j, (1+0j), (-1+0j), -1j, (-0.707-0.707j), 1j, (-0.707+0.707j), -1j, (0.707+0.707j), -1j, (-0.707-0.707j), (0.707-0.707j), (-1+0j), 1j, -1j, (-0.707+0.707j), (-1+0j), (-1+0j), (-1+0j), (0.707+0.707j), (1+0j), (0.707-0.707j), (1+0j), (-0.707+0.707j), (-0.707-0.707j), (-0.707+0.707j), (0.707-0.707j), (-0.707+0.707j), -1j, 1j, (-1+0j), (1+0j), (-0.707-0.707j), -1j
    #                       ])
    #Random
    #seq_found = np.array([-1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1]
    #                     )

    #seqs=np.ones((16, 32))
    seqs = seq_found.reshape((16, 32))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    
    """
    #newAF 2 16 16 CCC

    #CCC
    nested_list = [
        [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1],
         [1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1], [1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1],
         [1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1], [1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1],
         [1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1], [1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1],
         [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1],
         [1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1], [1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1],
         [1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1], [1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1],
         [1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1]],
        [[1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1],
         [1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1], [1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1],
         [1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1], [1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1],
         [1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1],
         [1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1],
         [1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1],
         [1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1], [1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1],
         [1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1]]
    ]

    seq_found = np.array([element for sublist1 in nested_list for sublist2 in sublist1 for element in sublist2])
    seqs = seq_found.reshape((32, 16)).T
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """

    """
    #newAF 2 16 64
    seq_found = np.array([1j, -1j, (-1+0j), (1+0j), 1j, 1j, 1j, -1j, 1j, 1j, 1j, 1j, -1j, 1j, (1+0j), -1j, -1j, (-1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (-1+0j), -1j, (-1+0j), -1j, (1+0j), 1j, 1j, (-1+0j), 1j, (-1+0j), -1j, (-1+0j), 1j, -1j, (-1+0j), -1j, 1j, (-1+0j), (-1+0j), (1+0j), (1+0j), -1j, 1j, (1+0j), (-1+0j), 1j, (-1+0j), 1j, (-1+0j), -1j, -1j, 1j, (1+0j), (1+0j), 1j, 1j, (1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), 1j, (-1+0j), 1j, (1+0j), (-1+0j), (1+0j), (-1+0j), -1j, (1+0j), (1+0j), 1j, 1j, 1j, (-1+0j), (-1+0j), -1j, 1j, (1+0j), 1j, -1j, (1+0j), (-1+0j), 1j, (-1+0j), 1j, (-1+0j), 1j, (-1+0j), -1j, (-1+0j), -1j, 1j, 1j, -1j, (-1+0j), (1+0j), -1j, -1j, -1j, (1+0j), -1j, -1j, -1j, (-1+0j), 1j, (-1+0j), -1j, (-1+0j), -1j, -1j, 1j, (-1+0j), (1+0j), -1j, (1+0j), (1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, (-1+0j), (1+0j), (1+0j), (1+0j), 1j, -1j, (1+0j), (1+0j), -1j, 1j, -1j, 1j, 1j, -1j, 1j, (1+0j), -1j, 1j, (1+0j), (1+0j), 1j, (-1+0j), (1+0j), (-1+0j), (1+0j), 1j, -1j, 1j, -1j, -1j, -1j, (-1+0j), -1j, (1+0j), -1j, -1j, (-1+0j), 1j, -1j, -1j, 1j, -1j, -1j, 1j, 1j, -1j, 1j, -1j, (-1+0j), -1j, 1j, (-1+0j), (-1+0j), -1j, (-1+0j), -1j, 1j, (1+0j), (-1+0j), (1+0j), 1j, (-1+0j), (1+0j), -1j, (1+0j), (1+0j), 1j, (-1+0j), (-1+0j), -1j, 1j, (1+0j), -1j, (1+0j), (1+0j), (1+0j), 1j, (-1+0j), -1j, 1j, (-1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), -1j, 1j, -1j, -1j, (1+0j), 1j, 1j, -1j, -1j, 1j, -1j, 1j, -1j, -1j, (-1+0j), (-1+0j), 1j, (-1+0j), 1j, (1+0j), -1j, (-1+0j), (-1+0j), 1j, 1j, (-1+0j), -1j, -1j, (1+0j), 1j, (-1+0j), (-1+0j), (-1+0j), (-1+0j), (1+0j), 1j, (1+0j), (-1+0j), (1+0j), (-1+0j), 1j, -1j, (-1+0j), 1j, (1+0j), -1j, (-1+0j), -1j, -1j, -1j, (1+0j), 1j, (-1+0j), -1j, (1+0j), -1j, -1j, -1j, -1j, 1j, (1+0j), 1j, (1+0j), 1j, 1j, -1j, -1j, 1j, -1j, (-1+0j), 1j, -1j, 1j, 1j, 1j, 1j, (1+0j), 1j, (-1+0j), (-1+0j), -1j, -1j, 1j, 1j, (-1+0j), -1j, 1j, (-1+0j), (1+0j), -1j, (1+0j), (1+0j), 1j, (1+0j), (1+0j), (1+0j), (1+0j), 1j, 1j, (1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), -1j, -1j, 1j, 1j, -1j, 1j, (1+0j), -1j, -1j, (1+0j), 1j, 1j, (-1+0j), (1+0j), -1j, -1j, (-1+0j), 1j, -1j, 1j, (1+0j), -1j, (-1+0j), 1j, -1j, -1j, (-1+0j), 1j, 1j, -1j, (-1+0j), (-1+0j), -1j, (1+0j), (-1+0j), 1j, (-1+0j), -1j, (1+0j), 1j, (-1+0j), (-1+0j), (1+0j), 1j, 1j, (-1+0j), -1j, 1j, (1+0j), 1j, -1j, 1j, (-1+0j), 1j, 1j, (-1+0j), 1j, (1+0j), -1j, -1j, (-1+0j), -1j, (1+0j), 1j, (1+0j), (-1+0j), 1j, (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), (-1+0j), (-1+0j), 1j, -1j, -1j, -1j, -1j, 1j, -1j, (1+0j), (1+0j), (1+0j), (-1+0j), (-1+0j), (-1+0j), (1+0j), (1+0j), (1+0j), 1j, -1j, -1j, 1j, 1j, (-1+0j), (1+0j), (1+0j), -1j, (1+0j), 1j, 1j, 1j, -1j, (1+0j), 1j, -1j, 1j, 1j, (1+0j), -1j, (-1+0j), 1j, 1j, 1j, (1+0j), 1j, (1+0j), -1j, (1+0j), (1+0j), (-1+0j), (-1+0j), 1j, (-1+0j), 1j, 1j, -1j, -1j, (1+0j), (1+0j), 1j, (-1+0j), 1j, 1j, -1j, (-1+0j), (1+0j), -1j, -1j, (-1+0j), (1+0j), (-1+0j), 1j, -1j, (-1+0j), 1j, -1j, -1j, (-1+0j), (-1+0j), (-1+0j), 1j, -1j, (-1+0j), (-1+0j), 1j, 1j, -1j, (-1+0j), (-1+0j), 1j, (1+0j), (-1+0j), (-1+0j), 1j, (1+0j), (-1+0j), -1j, -1j, (1+0j), 1j, -1j, 1j, 1j, (1+0j), (-1+0j), (1+0j), -1j, 1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), -1j, -1j, 1j, (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), -1j, 1j, (1+0j), (-1+0j), -1j, (1+0j), (-1+0j), 1j, (-1+0j), -1j, 1j, (1+0j), 1j, 1j, (-1+0j), 1j, 1j, (-1+0j), -1j, (1+0j), -1j, 1j, 1j, (1+0j), -1j, 1j, (-1+0j), -1j, 1j, (-1+0j), (1+0j), -1j, 1j, (1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), (-1+0j), (1+0j), 1j, 1j, 1j, (1+0j), -1j, (1+0j), (1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, -1j, -1j, -1j, -1j, (1+0j), (1+0j), -1j, -1j, (-1+0j), -1j, -1j, -1j, (1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), 1j, 1j, (1+0j), (1+0j), -1j, -1j, (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), 1j, (-1+0j), -1j, -1j, 1j, 1j, (-1+0j), (1+0j), -1j, -1j, 1j, -1j, 1j, (1+0j), (1+0j), 1j, (1+0j), (1+0j), -1j, (1+0j), (1+0j), -1j, (-1+0j), -1j, -1j, (1+0j), -1j, (-1+0j), -1j, -1j, -1j, (-1+0j), 1j, (-1+0j), -1j, (1+0j), 1j, 1j, 1j, (-1+0j), (-1+0j), (-1+0j), (1+0j), 1j, 1j, -1j, (-1+0j), (1+0j), 1j, (1+0j), 1j, (-1+0j), -1j, 1j, (-1+0j), (-1+0j), (1+0j), (1+0j), -1j, (1+0j), 1j, 1j, 1j, 1j, 1j, (-1+0j), (1+0j), (1+0j), (1+0j), (-1+0j), 1j, (1+0j), 1j, (1+0j), 1j, -1j, 1j, -1j, (1+0j), 1j, 1j, 1j, (-1+0j), -1j, -1j, 1j, 1j, (1+0j), -1j, 1j, -1j, 1j, -1j, -1j, -1j, (-1+0j), (1+0j), -1j, -1j, (1+0j), -1j, (-1+0j), (1+0j), -1j, 1j, (-1+0j), (1+0j), -1j, (-1+0j), -1j, -1j, -1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), 1j, -1j, 1j, (-1+0j), (1+0j), 1j, (1+0j), (-1+0j), (1+0j), (1+0j), (-1+0j), 1j, 1j, (1+0j), -1j, (1+0j), 1j, 1j, (1+0j), (1+0j), (1+0j), -1j, -1j, -1j, -1j, (1+0j), -1j, 1j, (-1+0j), (-1+0j), (1+0j), (-1+0j), 1j, 1j, 1j, -1j, (1+0j), (1+0j), -1j, (1+0j), -1j, (1+0j), (1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), (1+0j), -1j, 1j, 1j, 1j, (1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), 1j, -1j, (-1+0j), 1j, -1j, (-1+0j), -1j, 1j, (1+0j), (1+0j), -1j, (-1+0j), 1j, (-1+0j), (1+0j), 1j, 1j, 1j, -1j, (1+0j), (-1+0j), -1j, -1j, (-1+0j), (-1+0j), 1j, -1j, (-1+0j), -1j, (1+0j), -1j, (1+0j), (-1+0j), 1j, -1j, 1j, -1j, -1j, 1j, -1j, (1+0j), (1+0j), 1j, 1j, (1+0j), -1j, (-1+0j), 1j, 1j, (1+0j), 1j, 1j, (-1+0j), -1j, (1+0j), (-1+0j), (-1+0j), -1j, 1j, -1j, (-1+0j), 1j, -1j, 1j, (-1+0j), 1j, (1+0j), -1j, 1j, (1+0j), (1+0j), -1j, -1j, -1j, (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), (-1+0j), 1j, (1+0j), (1+0j), (-1+0j), 1j, (1+0j), -1j, -1j, (1+0j), -1j, (1+0j), (1+0j), (-1+0j), (-1+0j), -1j, 1j, (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), 1j, -1j, (1+0j), -1j, (1+0j), (1+0j), -1j, (-1+0j), (-1+0j), -1j, 1j, (-1+0j), 1j, -1j, -1j, (-1+0j), (-1+0j), 1j, (1+0j), -1j, 1j, (1+0j), -1j, 1j, 1j, (1+0j), (1+0j), (-1+0j), -1j, (-1+0j), (1+0j), 1j, 1j, -1j, (-1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), 1j, (1+0j), (-1+0j), (-1+0j), (1+0j), -1j, -1j, (1+0j), (1+0j), (-1+0j), (-1+0j), -1j, (1+0j), (-1+0j), -1j, 1j, 1j, 1j, (1+0j), (1+0j), (1+0j), (1+0j), 1j, (-1+0j), (-1+0j), 1j, 1j, (-1+0j), (1+0j), 1j, (1+0j), (-1+0j), (1+0j), (1+0j), (1+0j), (1+0j), -1j, (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), (-1+0j), (-1+0j), 1j, (-1+0j), 1j, -1j, (-1+0j), 1j, (1+0j), (1+0j), 1j, -1j, (1+0j), -1j, 1j, (-1+0j), 1j, -1j, (1+0j), -1j, (-1+0j), 1j, (1+0j), 1j, (-1+0j), 1j, (-1+0j), -1j, (1+0j), (1+0j), 1j, (1+0j), (1+0j), -1j, -1j, (1+0j), -1j, (1+0j), 1j, (1+0j), -1j, -1j, (1+0j), (1+0j), (-1+0j), (1+0j), -1j, 1j, 1j, 1j, -1j, -1j, 1j, (1+0j), 1j, 1j, -1j, -1j, -1j, (-1+0j), (-1+0j), -1j, (1+0j), 1j, (1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), (-1+0j), (-1+0j), -1j, 1j, -1j, (-1+0j), (-1+0j), (-1+0j), -1j, -1j, (1+0j), (-1+0j), -1j, (-1+0j), 1j, (-1+0j), 1j, (1+0j), (1+0j), (1+0j), (1+0j), -1j, (1+0j), -1j, (-1+0j), 1j, (-1+0j), -1j, (1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), -1j, (1+0j), -1j, (-1+0j), (-1+0j), 1j, (-1+0j), -1j, (-1+0j), (-1+0j), 1j, 1j, -1j, -1j, (-1+0j), (-1+0j), -1j, 1j, 1j, (-1+0j), -1j, (-1+0j), (-1+0j), (-1+0j), (-1+0j), 1j, 1j, (-1+0j), 1j, 1j, 1j, (-1+0j), -1j, -1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, (-1+0j), -1j, (-1+0j), (1+0j), 1j, (-1+0j), (-1+0j), 1j, (-1+0j), (-1+0j), (1+0j), 1j, (-1+0j), 1j, 1j, (-1+0j), (1+0j), -1j, -1j, -1j, (-1+0j), 1j, 1j, 1j, 1j, 1j, (-1+0j), (-1+0j), 1j, (1+0j), -1j, -1j, 1j, (1+0j), 1j, -1j, 1j, -1j, (1+0j), (1+0j), (-1+0j), -1j, 1j, (1+0j), (-1+0j), 1j, 1j, (-1+0j), 1j, 1j, (1+0j), 1j, (1+0j), 1j, 1j, -1j, (-1+0j), 1j, (1+0j), -1j, (1+0j), 1j, 1j, (-1+0j), 1j, (1+0j), (1+0j), -1j, (-1+0j), 1j, -1j, -1j, 1j, (1+0j), (1+0j), 1j, (-1+0j), (1+0j), 1j, (-1+0j), -1j, 1j, (-1+0j), (-1+0j), -1j, 1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), (-1+0j), (1+0j), (1+0j), -1j, (1+0j), (-1+0j), (-1+0j), 1j, -1j, (-1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), 1j, (1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), (-1+0j), 1j, -1j, (1+0j), 1j, -1j, -1j, (-1+0j), (-1+0j), -1j, 1j, (1+0j), -1j, -1j, (-1+0j), (1+0j), 1j, 1j, -1j, 1j, -1j, -1j, (1+0j), (-1+0j), (1+0j), -1j, (1+0j), 1j, (1+0j), (-1+0j), -1j, -1j, (-1+0j), (1+0j), -1j, (1+0j), (-1+0j), 1j, -1j, (1+0j), (1+0j), (-1+0j), -1j, 1j, (1+0j), -1j, -1j, -1j, (-1+0j), 1j, (-1+0j), (-1+0j), (-1+0j), (1+0j), 1j, (-1+0j), 1j, 1j, (1+0j), 1j, -1j, -1j, 1j, (-1+0j), (-1+0j), (1+0j), (1+0j), 1j, 1j, -1j, -1j, 1j, (1+0j), -1j, (1+0j), (1+0j), -1j, (1+0j), 1j, 1j, 1j, 1j, 1j, -1j, (1+0j), (1+0j), -1j, (-1+0j), (1+0j), (1+0j), -1j, (-1+0j), 1j, 1j, 1j, -1j, 1j, 1j, -1j, -1j, -1j, (1+0j), (1+0j), -1j, 1j, -1j, (-1+0j), -1j, (-1+0j), 1j, -1j, 1j, 1j, (-1+0j), -1j, (1+0j), -1j, -1j, 1j, (1+0j), (-1+0j), (1+0j), 1j, (1+0j), 1j, (1+0j), (1+0j), 1j, (-1+0j), -1j, 1j, 1j, 1j, (1+0j), -1j, -1j, (-1+0j), -1j, (-1+0j), 1j, (1+0j), 1j, (-1+0j), 1j, (-1+0j), (1+0j), 1j, 1j, (-1+0j), -1j, (1+0j), 1j, 1j, -1j, (-1+0j), (-1+0j), 1j, (-1+0j), (1+0j), 1j, -1j, (-1+0j), (1+0j), 1j, 1j, (-1+0j), (1+0j), 1j, (-1+0j), (-1+0j), (1+0j), -1j, (-1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), 1j, (-1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, (1+0j), (-1+0j), (1+0j), (1+0j), -1j, -1j, 1j, (-1+0j), (-1+0j), (-1+0j), -1j, (1+0j), 1j, (-1+0j), 1j, (1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), -1j, 1j, -1j, (-1+0j), -1j, (-1+0j), -1j, 1j, (1+0j), 1j, 1j, -1j, (1+0j), (-1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), (-1+0j), (1+0j), 1j, (-1+0j), -1j, -1j, 1j, (1+0j), (1+0j), (1+0j), 1j, 1j, (1+0j), 1j, (1+0j), 1j, (1+0j), 1j, (-1+0j), (1+0j), -1j, -1j, (-1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), -1j, (1+0j), -1j, -1j, (-1+0j), 1j, 1j, (-1+0j), -1j, (-1+0j), 1j, (1+0j), (-1+0j), 1j, (-1+0j), 1j, (1+0j), (1+0j), (-1+0j), (1+0j), 1j, 1j, (1+0j), 1j, (-1+0j), -1j, -1j, 1j, -1j, 1j, 1j, 1j, 1j, (1+0j), -1j, 1j, (-1+0j), 1j, (1+0j), -1j, (1+0j), 1j, -1j, (-1+0j), (-1+0j), (1+0j), 1j, 1j, 1j, 1j, -1j, 1j, 1j, 1j, (1+0j), -1j, -1j, 1j, -1j, 1j, (1+0j), (-1+0j), -1j, (1+0j), (1+0j), (-1+0j), 1j, -1j, -1j, (1+0j), 1j, (-1+0j), -1j, -1j, -1j, (-1+0j), (-1+0j), (-1+0j), (1+0j), -1j, 1j, -1j, (1+0j), (1+0j), -1j, (1+0j), -1j, (-1+0j), (1+0j), -1j, -1j, -1j, (-1+0j), 1j, (1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), (1+0j), -1j, 1j, (1+0j), -1j, 1j, (1+0j), -1j, (-1+0j), -1j, 1j, -1j, 1j, -1j, (1+0j), (1+0j), 1j, -1j, 1j, -1j, -1j, (-1+0j), -1j, (1+0j), -1j, 1j, (-1+0j), 1j, -1j, (-1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), -1j, -1j, 1j, (-1+0j), -1j, (-1+0j), (-1+0j), -1j, -1j, (1+0j), (1+0j), 1j, (1+0j), (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, (1+0j), (1+0j), -1j, (1+0j), 1j, -1j, 1j, -1j, 1j, -1j, (1+0j), (1+0j), -1j, -1j, (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (-1+0j), -1j, (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, 1j, (1+0j), -1j, -1j, (-1+0j), (-1+0j), (-1+0j), -1j, -1j, (1+0j), 1j, -1j, (-1+0j), (-1+0j), (1+0j), -1j, (1+0j), (-1+0j), -1j, (-1+0j), (1+0j), -1j, -1j, (1+0j), 1j, 1j, (1+0j), (-1+0j), (1+0j), -1j, (1+0j), (1+0j), -1j, -1j, (-1+0j), (-1+0j), 1j, (1+0j), 1j, -1j, 1j, (1+0j), 1j, -1j, 1j, 1j, 1j, (1+0j), (-1+0j), (1+0j), -1j, 1j, (1+0j), (1+0j), 1j, (1+0j), (-1+0j), -1j, (-1+0j), (1+0j), -1j, (-1+0j), 1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), -1j, 1j, 1j, (-1+0j), 1j, (1+0j), (-1+0j), 1j, (1+0j), (1+0j), 1j, (-1+0j), -1j, 1j, -1j, (1+0j), (1+0j), -1j, (1+0j), 1j, (1+0j), (1+0j), -1j, 1j, -1j, (-1+0j), (1+0j), -1j, -1j, 1j, 1j, -1j, -1j, (-1+0j), 1j, 1j, (-1+0j), 1j, (1+0j), 1j, (-1+0j), 1j, (-1+0j), -1j, -1j, 1j, 1j, (-1+0j), 1j, (-1+0j), (-1+0j), -1j, (1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), -1j, -1j, 1j, 1j, (1+0j), 1j, -1j, (-1+0j), -1j, (-1+0j), (-1+0j), 1j, (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), 1j, (1+0j), (1+0j), -1j, 1j, 1j, (1+0j), (1+0j), 1j, (-1+0j), (-1+0j), -1j, -1j, (1+0j), (1+0j), (-1+0j), (1+0j), 1j, (-1+0j), -1j, 1j, (1+0j), -1j, -1j, (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, -1j, (-1+0j), (-1+0j), (1+0j), 1j, 1j, (1+0j), 1j, -1j, -1j, (1+0j), 1j, (1+0j), (-1+0j), (1+0j), -1j, (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), -1j, -1j, 1j, (-1+0j), (1+0j), -1j, (1+0j), -1j, (1+0j), -1j, (-1+0j), 1j, (1+0j), 1j, (-1+0j), 1j, (1+0j), -1j, 1j, (-1+0j), -1j, (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, (1+0j), -1j, (1+0j), 1j, 1j, (1+0j), 1j, -1j, (-1+0j), 1j, (-1+0j), -1j, (-1+0j), -1j, (1+0j), (1+0j), -1j, 1j, (-1+0j), -1j, (-1+0j), -1j, (1+0j), 1j, (1+0j), 1j, (1+0j), -1j, 1j, (-1+0j), (-1+0j), 1j, 1j, 1j, -1j, 1j, (1+0j), (-1+0j), 1j, -1j, (1+0j), (1+0j), (1+0j), -1j, 1j, 1j, 1j, 1j, 1j, (-1+0j), 1j, (-1+0j), 1j, (1+0j), -1j, (1+0j), 1j, -1j, (-1+0j), (1+0j), -1j, -1j, (1+0j), -1j, (-1+0j), (1+0j), (1+0j), -1j, 1j, (1+0j), (-1+0j), 1j, 1j, 1j, -1j, 1j, (1+0j), (1+0j), 1j, 1j, (-1+0j), (-1+0j), 1j, 1j, (-1+0j), -1j, (-1+0j), (1+0j), (-1+0j), 1j, (1+0j), (1+0j), 1j, (1+0j), -1j, (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, (1+0j), (1+0j), -1j, (1+0j), -1j, -1j, -1j, -1j, (-1+0j), -1j, -1j, (-1+0j), -1j, -1j, (-1+0j), (-1+0j), 1j, (-1+0j), (-1+0j), -1j, -1j, 1j, -1j, 1j, (-1+0j), -1j, -1j, (1+0j), 1j, (1+0j), (1+0j), 1j, -1j, 1j, -1j, -1j, (-1+0j), 1j, -1j, (1+0j), (-1+0j), 1j, 1j, (-1+0j), (1+0j), (1+0j), -1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), (-1+0j), 1j, -1j, 1j, 1j, -1j, 1j, -1j, -1j, 1j, -1j, (1+0j), 1j, (-1+0j), -1j, (1+0j), (-1+0j), (-1+0j), (1+0j), (1+0j), (-1+0j), (1+0j), -1j, (-1+0j), 1j, -1j, (1+0j)
                          ])
    #seq_found=np.ones((64, 32))
    seqs = seq_found.reshape((64, 32))
    #m要手动设置
    M = 2
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """



    """
    #newAF 4 16 16
    seq_found = np.array([(-1+0j), (-1+0j), (1+0j), 1j, (-1+0j), -1j, (-1+0j), -1j, (-1+0j), (-1+0j), 1j, (-1+0j), -1j, 1j, (-1+0j), -1j, (1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, 1j, (1+0j), 1j, -1j, (1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), (1+0j), -1j, (-1+0j), 1j, -1j, -1j, 1j, (1+0j), -1j, 1j, (-1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), 1j, 1j, (1+0j), (1+0j), -1j, -1j, (-1+0j), -1j, 1j, 1j, 1j, 1j, 1j, 1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), -1j, -1j, (1+0j), (1+0j), -1j, (-1+0j), 1j, 1j, -1j, -1j, -1j, (-1+0j), (1+0j), (1+0j), -1j, -1j, -1j, -1j, (1+0j), (1+0j), (1+0j), (-1+0j), (1+0j), 1j, -1j, (-1+0j), -1j, (1+0j), 1j, -1j, -1j, (-1+0j), (1+0j), (1+0j), (-1+0j), -1j, 1j, (-1+0j), (1+0j), (1+0j), (-1+0j), 1j, (1+0j), -1j, (1+0j), 1j, -1j, (1+0j), 1j, (-1+0j), (-1+0j), 1j, 1j, (1+0j), (-1+0j), (1+0j), (-1+0j), (1+0j), -1j, -1j, (1+0j), (-1+0j), -1j, -1j, 1j, (-1+0j), (-1+0j), 1j, (1+0j), (1+0j), (1+0j), 1j, -1j, 1j, -1j, 1j, (-1+0j), (-1+0j), -1j, (1+0j), (1+0j), (-1+0j), (-1+0j), 1j, 1j, (-1+0j), (1+0j), (1+0j), 1j, 1j, 1j, (-1+0j), -1j, 1j, (1+0j), -1j, (1+0j), (-1+0j), (1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), -1j, (1+0j), (1+0j), 1j, 1j, (1+0j), -1j, 1j, -1j, 1j, -1j, 1j, -1j, -1j, -1j, 1j, (1+0j), -1j, 1j, (1+0j), (1+0j), (1+0j), (-1+0j), 1j, 1j, 1j, 1j, 1j, -1j, -1j, 1j, -1j, (1+0j), 1j, (-1+0j), -1j, (1+0j), 1j, 1j, (1+0j), -1j, (-1+0j), -1j, (1+0j), -1j, (1+0j), -1j, 1j, -1j, 1j, 1j, 1j, 1j, (1+0j), 1j, (-1+0j), 1j, (-1+0j), (-1+0j), 1j, (-1+0j), (-1+0j), 1j, 1j, (-1+0j), (-1+0j), (1+0j), -1j, (-1+0j), -1j, (-1+0j), 1j, (1+0j), (-1+0j), 1j, -1j, (1+0j), (-1+0j), 1j, (-1+0j), 1j, (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, (-1+0j), (-1+0j), -1j, -1j, (1+0j), 1j, -1j, (1+0j), 1j, 1j, 1j, 1j, (-1+0j), -1j, 1j, 1j, (-1+0j), -1j, -1j, (1+0j), -1j, -1j, 1j, -1j, -1j, (-1+0j), (1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), -1j, -1j, (1+0j), -1j, 1j, 1j, 1j, 1j, 1j, 1j, -1j, (1+0j), (1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), -1j, 1j, (1+0j), (-1+0j), -1j, 1j, (1+0j), (1+0j), (1+0j), (-1+0j), (1+0j), 1j, -1j, (-1+0j), -1j, (1+0j), 1j, (1+0j), 1j, 1j, 1j, (-1+0j), (-1+0j), -1j, -1j, (1+0j), (1+0j), 1j, 1j, (1+0j), -1j, 1j, (-1+0j), 1j, -1j, (1+0j), -1j, 1j, (-1+0j), 1j, 1j, 1j, -1j, -1j, (-1+0j), -1j, -1j, -1j, (-1+0j), -1j, -1j, (-1+0j), -1j, (1+0j), 1j, (1+0j), 1j, (1+0j), 1j, 1j, -1j, (-1+0j), -1j, 1j, 1j, (1+0j), (1+0j), (1+0j), 1j, -1j, -1j, (-1+0j), 1j, 1j, (1+0j), 1j, (-1+0j), -1j, 1j, (1+0j), (-1+0j), -1j, 1j, (1+0j), (1+0j), (-1+0j), -1j, (1+0j), (1+0j), 1j, -1j, -1j, 1j, 1j, (-1+0j), -1j, (1+0j), 1j, -1j, (-1+0j), 1j, (-1+0j), (1+0j), (-1+0j), 1j, -1j, 1j, (1+0j), -1j, -1j, 1j, (-1+0j), -1j, -1j, (1+0j), (1+0j), 1j, -1j, 1j, -1j, (1+0j), -1j, -1j, (-1+0j), (1+0j), (1+0j), (1+0j), -1j, -1j, -1j, -1j, -1j, -1j, -1j, (-1+0j), (1+0j), (1+0j), (1+0j), 1j, (-1+0j), (1+0j), (-1+0j), (1+0j), (-1+0j), -1j, 1j, (1+0j), (1+0j), -1j, (1+0j), (1+0j), (-1+0j), 1j, (1+0j), (1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), (-1+0j), 1j, (1+0j), -1j, -1j, (-1+0j), (1+0j), -1j, 1j, 1j, -1j, (-1+0j), -1j, 1j, -1j, -1j, 1j, -1j, (1+0j), (-1+0j), (1+0j), (1+0j), 1j, (1+0j), -1j, -1j, 1j, -1j, -1j, (-1+0j), 1j, 1j, 1j, -1j, -1j, (1+0j), -1j, 1j, -1j, (-1+0j), (-1+0j), (1+0j), 1j, (-1+0j), -1j, 1j, 1j, -1j, (1+0j), -1j, 1j, -1j, 1j, (1+0j), -1j, (-1+0j), (-1+0j), 1j, (-1+0j), -1j, (1+0j), (-1+0j), (-1+0j), -1j, (1+0j), (-1+0j), (1+0j), -1j, (-1+0j), (1+0j), 1j, (-1+0j), (-1+0j), (1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), (1+0j), (1+0j), -1j, -1j, -1j, (-1+0j), 1j, (-1+0j), (-1+0j), (1+0j), 1j, (-1+0j), 1j, (1+0j), (1+0j), -1j, -1j, -1j, (-1+0j), -1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), (1+0j), -1j, 1j, 1j, (-1+0j), 1j, -1j, (1+0j), 1j, (1+0j), -1j, (1+0j), 1j, -1j, (-1+0j), -1j, (1+0j), -1j, 1j, (1+0j), 1j, (-1+0j), 1j, (-1+0j), (1+0j), -1j, (-1+0j), (-1+0j), (1+0j), (1+0j), (-1+0j), (-1+0j), -1j, (1+0j), (1+0j), (1+0j), -1j, (1+0j), -1j, (1+0j), (1+0j), 1j, 1j, -1j, (-1+0j), 1j, (-1+0j), (-1+0j), -1j, 1j, -1j, 1j, 1j, -1j, 1j, 1j, 1j, 1j, (-1+0j), (1+0j), (-1+0j), (1+0j), -1j, -1j, (1+0j), 1j, (-1+0j), -1j, -1j, (1+0j), -1j, (1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), (-1+0j), 1j, 1j, -1j, (-1+0j), -1j, -1j, -1j, (1+0j), (1+0j), (-1+0j), -1j, (-1+0j), 1j, (1+0j), 1j, (-1+0j), -1j, (1+0j), (-1+0j), 1j, (-1+0j), -1j, (-1+0j), 1j, (-1+0j), (-1+0j), (1+0j), -1j, -1j, 1j, (-1+0j), (1+0j), -1j, (1+0j), 1j, -1j, -1j, (-1+0j), 1j, -1j, (1+0j), -1j, -1j, (1+0j), 1j, (1+0j), (-1+0j), (-1+0j), 1j, 1j, -1j, 1j, 1j, -1j, (-1+0j), (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), (1+0j), (-1+0j), (-1+0j), (1+0j), (-1+0j), 1j, 1j, (1+0j), (-1+0j), (1+0j), -1j, (1+0j), (1+0j), -1j, (-1+0j), 1j, (-1+0j), (-1+0j), (1+0j), 1j, (1+0j), -1j, (-1+0j), 1j, (1+0j), 1j, -1j, -1j, (-1+0j), 1j, (-1+0j), -1j, (-1+0j), (-1+0j), 1j, (1+0j), (-1+0j), -1j, -1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), 1j, -1j, -1j, (-1+0j), -1j, -1j, (1+0j), (1+0j), (1+0j), 1j, -1j, -1j, (1+0j), (1+0j), -1j, -1j, -1j, 1j, -1j, 1j, 1j, (1+0j), 1j, (-1+0j), 1j, (-1+0j), -1j, 1j, -1j, (1+0j), (1+0j), 1j, (-1+0j), (1+0j), (1+0j), 1j, 1j, 1j, (-1+0j), 1j, (1+0j), (-1+0j), 1j, 1j, (1+0j), -1j, 1j, (1+0j), -1j, (1+0j), (1+0j), (-1+0j), (-1+0j), -1j, 1j, (1+0j), (1+0j), 1j, -1j, (-1+0j), 1j, (1+0j), 1j, 1j, (1+0j), 1j, (1+0j), -1j, -1j, (-1+0j), -1j, (-1+0j), -1j, 1j, -1j, (-1+0j), 1j, (1+0j), (-1+0j), (1+0j), -1j, (1+0j), (-1+0j), -1j, (-1+0j), 1j, (-1+0j), (1+0j), -1j, (-1+0j), 1j, 1j, -1j, (1+0j), (1+0j), (1+0j), -1j, (-1+0j), -1j, 1j, 1j, (-1+0j), (1+0j), (1+0j), -1j, 1j, (-1+0j), -1j, (-1+0j), (-1+0j), (-1+0j), -1j, (1+0j), -1j, -1j, 1j, 1j, (-1+0j), (-1+0j), 1j, 1j, (-1+0j), -1j, 1j, (-1+0j), -1j, (1+0j), -1j, (1+0j), (-1+0j), (1+0j), (-1+0j), -1j, (-1+0j), (-1+0j), -1j, 1j, 1j, 1j, (1+0j), (-1+0j), -1j, 1j, (-1+0j), (1+0j), (-1+0j), 1j, (-1+0j), (1+0j), 1j, (-1+0j), 1j, 1j, -1j, (-1+0j), (1+0j), (-1+0j), (-1+0j), 1j, -1j, -1j, -1j, (1+0j), 1j, 1j, (-1+0j), (-1+0j), -1j, (-1+0j), (1+0j), 1j, 1j, 1j, (-1+0j), -1j, (1+0j), 1j, (1+0j), 1j, (-1+0j), 1j, (1+0j), 1j, (1+0j), (1+0j), (1+0j), (1+0j), 1j, (1+0j), (-1+0j), 1j, (-1+0j), 1j, (1+0j), (1+0j), 1j, (-1+0j), -1j, -1j, 1j, -1j, (1+0j), 1j, (-1+0j), (1+0j), (-1+0j), -1j, (1+0j), 1j, 1j, (-1+0j), -1j, (1+0j), (1+0j), -1j, -1j, (1+0j), (1+0j), (-1+0j), (1+0j), (1+0j), (1+0j), -1j, (-1+0j), -1j, 1j, (1+0j), 1j, (1+0j), (-1+0j), (1+0j), (-1+0j), 1j, 1j, (1+0j), -1j, (-1+0j), (1+0j), 1j, 1j, -1j, (1+0j), (1+0j), 1j, -1j, -1j, (1+0j), (-1+0j), (-1+0j), -1j, -1j, 1j, (-1+0j), 1j, (-1+0j), 1j, -1j, (1+0j), -1j, -1j, 1j, (1+0j), -1j, (1+0j), (1+0j), 1j, (1+0j), -1j
                          ])

    seqs = seq_found.reshape((16, 64))
    #m要手动设置
    M = 4
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """

    """
    #newAF 8 8 8
    seq_found = np.array([-1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1,                      ])
    seqs = seq_found.reshape((8, 64))
    #m要手动设置
    M = 8
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """
    """
    #newAF 8 16 16
    seq_found = np.array([1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1,
                          ])
    seqs = seq_found.reshape((16, 128))
    #m要手动设置
    M = 8
    #f_hz(Hz)要手动设置
    f_hz = 11111.11
    """





    L = seqs.shape[0]
    K = int(seqs.shape[1] / M)
    Tpri=3.33e-6
    Tc=3.33e-9
    doppler_interval = np.linspace(0, f_hz, 500)
    mainlobe = K*L
    corr_method = 'aperiodic'
    if corr_method == 'aperiodic':
        delay_interval = np.arange(-L + 1, L)
        autoCorrMax = ap_auto_ambu_cal(M, K, L, delay_interval, doppler_interval,Tpri,Tc, seqs,mainlobe)
        print("autoCorrMax",autoCorrMax)
        print("maxAF",20 * np.log10(autoCorrMax/(K*L)))
        CrossCorrMax = ap_cross_ambu_cal(M, K, L, delay_interval, doppler_interval, Tpri,Tc,seqs,mainlobe)
        print("CrossCorrMax",CrossCorrMax)
        print("maxAF",20 * np.log10(CrossCorrMax/(K*L)))
    elif corr_method == 'periodic':
        delay_interval = np.arange(0, L)
        p_auto_ambu = p_auto_ambu_cal(M, K, L, delay_interval, doppler_interval, Tpri,Tc,seqs)
        p_cross_ambu = p_cross_ambu_cal(M, K, L, delay_interval, doppler_interval,Tpri,Tc, seqs)


    import random
    code = []
    for _ in range(512):
        bit = random.choice([-1, 1])
        code.append(bit)
    print(code)
