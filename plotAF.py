import numpy as np
from numpy.fft import fft, ifft
import MM_H_Converge as MM
import time
import os
import matplotlib.pyplot as plt

def plot_3d_AF(X,H,Q,fq_values,N,K_range):
    # 初始化二维数组（列数=多普勒频点数，行数=延迟单元数）
    delays_count = K_range[1] - K_range[0] + 1
    AF_KQ = np.zeros((delays_count, Q), dtype=np.float32)
    AF_KQ1 = np.zeros((delays_count, Q), dtype=np.complex128)
    mainlobe = 0
    for q in range(Q):
        f_q = fq_values[q]
        n = np.arange(N)
        doppler_phase = np.exp(1j * 2 * np.pi * f_q * n / N)
        x_q = X * doppler_phase  # 频移后的发射信号
        # 计算AF并存入当前列
        AF_Q = MM.compute_AF_fft(H, x_q)
        # 截取指定延迟范围 [K_range[0], K_range[1]]
        start_idx = N - 1 + K_range[0]
        end_idx = N - 1 + K_range[1] + 1
        # AF_KQ[:, q] = np.abs(AF_Q[start_idx:end_idx])
        AF_KQ1[:, q] = AF_Q[start_idx:end_idx]
        AF_KQ = np.abs(AF_KQ1)
        if q == 0:
            mainlobe = np.abs(AF_Q[N-1])
        # 转换为dB值（以主瓣为0dB）
    # center_y = N - 1
    # mainlobe = 50
    AF_db = 20 * np.log10(AF_KQ / mainlobe)
    # AF_db[center_y, 0] = mainlobe
    # 创建3D图形
    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111, projection='3d')
    # 计算中间行列的偏移量
    rows, cols = AF_db.shape
    center_x = cols // 2  # 中间列索引
    center_y = rows // 2  # 中间行索引
    # 生成以中间为0的坐标轴
    x = np.arange(cols) - center_x  # x轴：中间列对应0
    y = np.arange(rows) - center_y  # y轴：中间行对应0
    X, Y = np.meshgrid(x, y)        # 生成网格坐标
    surf = ax.plot_surface(Y, X, AF_db, cmap='rainbow', rstride=1, cstride=1)
    # 添加颜色条
    fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5, label='Intensity (dB)')
    # 设置坐标轴标签
    ax.set_xlabel('Delay')
    ax.set_ylabel('Doppler phase')
    ax.set_zlabel('$\chi(f,\\tau)$ (dB)')
    zticks = [-90,-80,-70,-60,-50,-40,-30,-20,-10,0]
    ax.set_zticks(zticks)
    ax.set_zlabel('Z Value (dB)')
    # 设置标题
    plt.title('3D Visualization of AF_db')
    # 显示图形
    plt.show()
    plt.savefig("AF.png")
if __name__ == '__main__':
    # 示例用法
    max_iter = 100
    L = 4
    lambda_val = 100
    epision = 1 / (lambda_val + 1)
    mu = 0.5
    Q = 10  # 多普勒单元数
    fq_values = np.linspace(-0.5, 0.5, num=Q)  # 示例多普勒频点
    # 参数设置
    N = 64  # 序列长度
    M = 2  # 发射/接收通道数
    a_max = 1.0  # 最大旁瓣约束
    K_range = (-50, 50)
    # 初始化参数
    # 步骤1：生成随机复数矩阵
    H_raw = np.random.randn(N, M) + 1j * np.random.randn(N, M)
    # 步骤2：计算原始范数
    norms_raw = np.linalg.norm(H_raw, axis=0)  # shape=(M,)
    # 步骤3：归一化操作
    # H_normalized = H_raw / (norms_raw / np.sqrt(N))[None, :]
    # 初始化离散相位序列 X (L=4相位)
    # phases = np.exp(1j * 2 * np.pi * np.arange(L) / L)  # [1, j, -1, -j]
    # X = np.array([[np.random.choice(phases) for _ in range(N)] for _ in range(M)])
    # 方案1：数值修约（推荐）
    # X = np.round(X, decimals=15)  # 保留15位小数精度

H = np.array([-8.400882291158369153e-01 - 8.076898374063413710e-01j,
              -7.126767075084586844e-01 - 1.847565372565264097e-01j,
              -5.341603734881620325e-01 + 5.638879686741353758e-01j,
              -7.111226583513248212e-01 - 5.274846752542733386e-01j,
              8.925257628353004957e-01 - 5.005939066347996763e-02j,
              -1.351134557065775399e-01 - 3.434696699464445668e-01j,
              -7.844838632441776261e-01 - 3.632946363993282413e-01j,
              1.014058899457773499e+00 - 5.057535106471215958e-01j,
              -1.103381798182387907e+00 - 4.369172760260495170e-01j,
              -6.053885878740221660e-01 - 1.314507297485352777e-01j,
              -1.080685418130721276e+00 - 1.561872224589362368e-01j,
              -4.056729234911458648e-01 - 8.059536755390143137e-01j,
              -1.015937511243460323e+00 - 5.299732689066614100e-01j,
              -3.799136553212752454e-01 - 5.984104938173510913e-02j,
              2.092079886531893473e-01 - 5.249109071192925580e-02j,
              7.341690705670479433e-01 + 8.886813633899521836e-01j,
              3.173712969027134290e-01 + 9.399386355772073598e-01j,
              1.264550904804008669e+00 + 5.780963485689413206e-01j,
              1.276393451489969411e-01 - 3.717216036596163176e-01j,
              -2.417525277386811944e-01 + 7.375509447166450627e-01j,
              -3.277247838431022187e-01 + 1.001070398005121431e+00j,
              1.261439271806892581e-01 - 9.619642600660255338e-01j,
              -7.252165360722629961e-01 + 8.290246653824680234e-02j,
              8.490064443592465482e-01 + 5.791807017494697840e-01j,
              -2.337268325211780406e-01 + 2.851396506738798076e-01j,
              7.237408507352305342e-02 - 7.655085639695683453e-01j,
              -2.993463282202521447e-02 - 5.133654005512454654e-01j,
              2.550617036618351152e-01 + 5.156924782417641184e-01j,
              1.353988668425586184e+00 + 3.936247575738273385e-02j,
              -1.291656791775101620e+00 + 1.122254464140310493e+00j,
              -6.993983404893292510e-01 - 4.968985028262583314e-02j,
              -3.355763401350099762e-01 - 8.063893466679932232e-01j,
              -5.304187091195071702e-01 + 9.433992212954119827e-01j,
              6.262135741428594971e-01 + 7.246514769281559021e-01j,
              1.347987616217364959e+00 + 1.252438142390438269e+00j,
              -1.141413692174904959e+00 - 1.210400157196998422e-01j,
              2.913090813810438866e-03 - 4.608517527917898038e-01j,
              4.640992618396851954e-01 - 3.354809042592112878e-01j,
              -1.814303138696805040e-01 + 2.444441170332811164e-01j,
              2.438595406466760318e-01 + 1.875790723834627471e-01j,
              3.148723793007229821e-01 + 5.179137402194773365e-01j,
              -8.219631848071000668e-01 - 6.530196186517848167e-01j,
              -4.077536422796285143e-01 - 1.338585585401803058e-01j,
              -5.699520845198727814e-01 - 6.126460706794908395e-01j,
              -6.736880103828837285e-01 - 9.457515584411316789e-01j,
              1.391620567470062797e+00 - 1.559180216398081964e-01j,
              -4.476535425681314462e-01 + 3.578302154074836650e-01j,
              4.743558434829531767e-01 - 1.009266779058645147e+00j,
              1.457537644074849981e-01 - 3.846953537229438891e-02j,
              6.892759699291345354e-01 - 2.087843176593658368e-01j,
              -7.063123965386418623e-01 - 3.163509124586565829e-02j,
              -1.220547616103091482e-01 + 8.255856693673978564e-01j,
              -2.803838402813530473e-01 - 4.962322375123982832e-02j,
              -5.285642065682016888e-01 + 7.244549528182492315e-01j,
              7.236397387047805996e-01 - 6.573719197871041864e-01j,
              7.295639030279142505e-03 - 9.046320885074824458e-01j,
              7.513901804191054634e-02 - 3.635643063114889495e-01j,
              -1.421375029028072001e+00 - 4.622544476380175960e-01j,
              5.357969970829530304e-01 + 1.039275638537510149e+00j,
              -1.047186160232009833e+00 - 1.526755132096741630e+00j,
              -1.309962685707605767e-01 + 2.017027960256219665e-01j,
              1.873808720755926194e-01 + 1.849032217597868177e+00j,
              -7.092640562013311500e-01 + 7.380640868528045573e-01j,
              -2.358465127673964545e+00 - 1.288699535619754755e-01j])

X = np.array([6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j,
 6.123233995736766036e-17-1.000000000000000000e+00j,
 -1.000000000000000000e+00+1.224646799147353207e-16j,
 6.123233995736766036e-17+1.000000000000000000e+00j,
 1.000000000000000000e+00+0.000000000000000000e+00j])

plot_3d_AF(X,H,Q,fq_values,N,K_range)

